{
    "extends": [
        "next/core-web-vitals",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
        "plugin:prettier/recommended"
    ],
    "plugins": [
        "@typescript-eslint"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "project": true,
        "tsconfigRootDir": "__dirname"
    },
    "rules": {
        "quotes": [
            "error",
            "double"
        ],
        "array-callback-return": [
            "error",
            {
                "checkForEach": true
            }
        ],
        "no-await-in-loop": "error",
        "no-constant-binary-expression": "error",
        "no-constructor-return": "error",
        "no-duplicate-imports": [
            "error",
            {
                "includeExports": true
            }
        ],
        "no-promise-executor-return": "error",
        "no-self-compare": "error",
        "no-template-curly-in-string": "error",
        "no-unmodified-loop-condition": "error",
        "no-unreachable-loop": "error",
        "no-unused-private-class-members": "error",
        "no-use-before-define": "off",
        "@typescript-eslint/no-use-before-define": [
            "error",
            {
                // react
                "variables": false
            }
        ],
        "require-atomic-updates": "error",
        "accessor-pairs": [
            "error",
            {
                "getWithoutSet": true
            }
        ],
        "block-scoped-var": "error",
        "camelcase": [
            "error",
            {
                "ignoreDestructuring": true,
                "ignoreImports": true,
                "ignoreGlobals": true
            }
        ],
        "class-methods-use-this": "error",
        "consistent-return": [
            "error",
            {
                "treatUndefinedAsUnspecified": true
            }
        ],
        "consistent-this": [
            "error",
            "that"
        ],
        "default-case": "error",
        "default-case-last": "error",
        "default-param-last": "error",
        "dot-notation": "error",
        "eqeqeq": "error",
        "func-name-matching": [
            "error",
            "always"
        ],
        "func-style": [
            "error",
            "declaration",
            {
                "allowArrowFunctions": true
            }
        ],
        "grouped-accessor-pairs": "error",
        "id-denylist": [
            "error",
            "data",
            "err",
            "e",
            "cb",
            "callback"
        ],
        "init-declarations": [
            "error",
            "always"
        ],
        "max-depth": [
            "error",
            4
        ],
        "max-lines": [
            "error",
            500
        ],
        "max-nested-callbacks": [
            "error",
            5
        ],
        "max-params": [
            "error",
            7
        ],
        "max-statements": [
            "error",
            15
        ],
        "new-cap": [
            "error",
            {
                "capIsNewExceptions": [
                    // FONTS
                    "Pompiere",
                    "Annie_Use_Your_Telescope",
                    "Babylonica",
                    "Poiret_One",
                    "Rubik_Glitch",
                    "Sue_Ellen_Francisco",
                    "Open_Sans",
                    "ElectricityTable"
                ]
            }
        ],
        "no-alert": "error",
        "no-array-constructor": "error",
        "multiline-comment-style": [
            "error",
            "separate-lines"
        ],
        "no-bitwise": "error",
        "no-caller": "error",
        "no-confusing-arrow": "error",
        "no-console": [
            "warn",
            {
                "allow": [
                    "warn",
                    "error",
                    // TODO remove log after testing
                    "log"
                ]
            }
        ],
        "no-continue": "error",
        "no-div-regex": "error",
        "no-else-return": "error",
        "no-empty-function": "error",
        "no-eq-null": "error",
        "no-eval": "error",
        "no-extend-native": "error",
        "no-extra-bind": "error",
        "no-extra-label": "error",
        "no-floating-decimal": "error",
        "no-implicit-coercion": "error",
        "no-implied-eval": "error",
        "no-inline-comments": "error",
        "no-invalid-this": "error",
        "no-iterator": "error",
        "no-label-var": "error",
        "no-labels": "error",
        "no-lone-blocks": "error",
        "no-lonely-if": "error",
        "no-loop-func": "error",
        "no-magic-numbers": [
            "error",
            {
                "ignoreArrayIndexes": true,
                "ignore": [
                    // styling
                    -1,
                    0,
                    1,
                    2,
                    3,
                    4,
                    7,
                    8,
                    80,
                    100,
                    -604800,
                    4.6,
                    11,
                    77,
                    0.5
                ]
            }
        ],
        "no-mixed-operators": "error",
        "no-multi-assign": "error",
        "no-multi-str": "error",
        "no-negated-condition": "error",
        "no-nested-ternary": "error",
        "no-new": "error",
        "no-new-func": "error",
        "no-new-object": "error",
        "no-new-wrappers": "error",
        "no-octal-escape": "error",
        "no-param-reassign": "error",
        "no-proto": "error",
        "no-return-assign": "error",
        "no-return-await": "error",
        "no-script-url": "error",
        "no-sequences": "error",
        "no-shadow": "error",
        "no-throw-literal": "error",
        "no-undef-init": "error",
        "no-undefined": "error",
        "no-underscore-dangle": "error",
        "no-unused-expressions": [
            "error",
            {
                "allowShortCircuit": true,
                "allowTernary": true
            }
        ],
        "no-unused-vars": [
            "error",
            {
                "argsIgnorePattern": "^_"
            }
        ],
        "@typescript-eslint/no-unused-vars": [
            "error",
            {
                "argsIgnorePattern": "^_"
            }
        ],
        "no-useless-call": "error",
        "no-useless-computed-key": "error",
        "no-useless-concat": "error",
        "no-useless-constructor": "error",
        "no-useless-rename": "error",
        "no-useless-return": "error",
        "no-var": "error",
        "no-void": [
            "error",
            {
                "allowAsStatement": true
            }
        ],
        "no-warning-comments": "off",
        "object-shorthand": "error",
        "one-var-declaration-per-line": [
            "error",
            "initializations"
        ],
        "operator-assignment": [
            "error",
            "always"
        ],
        "prefer-arrow-callback": "error",
        "prefer-const": "error",
        "prefer-exponentiation-operator": "error",
        "prefer-object-has-own": "error",
        "prefer-object-spread": "error",
        "prefer-promise-reject-errors": "error",
        "prefer-rest-params": "error",
        "prefer-spread": "error",
        "prefer-template": "error",
        "require-await": "error",
        "vars-on-top": "error",
        "yoda": "error",
        "spaced-comment": [
            "error",
            "always"
        ],
        "array-bracket-newline": [
            "error",
            "consistent"
        ],
        "array-bracket-spacing": [
            "error",
            "never"
        ],
        "arrow-parens": [
            "error",
            "always"
        ],
        "arrow-spacing": "error",
        "comma-spacing": [
            "error",
            {
                "before": false,
                "after": true
            }
        ],
        "comma-style": [
            "error",
            "last"
        ],
        "computed-property-spacing": [
            "error",
            "never"
        ],
        "eol-last": [
            "error",
            "always"
        ],
        "func-call-spacing": [
            "error",
            "never"
        ],
        "generator-star-spacing": [
            "error",
            {
                "before": true,
                "after": false
            }
        ],
        "implicit-arrow-linebreak": [
            "error",
            "beside"
        ],
        "key-spacing": [
            "error",
            {
                "beforeColon": false
            }
        ],
        "keyword-spacing": [
            "error",
            {
                "before": true
            }
        ],
        "line-comment-position": [
            "error",
            {
                "position": "above"
            }
        ],
        "@typescript-eslint/consistent-type-definitions": [
            "error",
            "interface"
        ],
        "react/boolean-prop-naming": [
            "error",
            {
                "rule": "^(is|has)[A-Z]([A-Za-z0-9]?)+"
            }
        ],
        // MUI already takes care this
        "react/button-has-type": "error",
        "react/default-props-match-prop-types": "error",
        "react/destructuring-assignment": [
            "error",
            "always"
        ],
        "react/forbid-component-props": "off",
        "react/forbid-foreign-prop-types": "error",
        "react/forbid-prop-types": "error",
        "react/function-component-definition": "error",
        "react/hook-use-state": "error",
        "react/iframe-missing-sandbox": "error",
        "react/jsx-boolean-value": "error",
        "react/jsx-child-element-spacing": "error",
        "react/jsx-handler-names": "error",
        "react/jsx-max-depth": [
            "error",
            {
                "max": 5
            }
        ],
        "react/jsx-no-constructed-context-values": "error",
        "react/jsx-no-leaked-render": [
            "error",
            {
                "validStrategies": [
                    "ternary",
                    "coerce"
                ]
            }
        ],
        // other rules already catches this
        "react/jsx-no-useless-fragment": "error",
        // other rules already enforce this
        "react/jsx-pascal-case": "error",
        "react/jsx-props-no-spreading": "error",
        "react/no-access-state-in-setstate": "error",
        // makesure key is unique might be bothersome
        "react/no-array-index-key": "error",
        "react/no-arrow-function-lifecycle": "error",
        "react/no-danger": "error",
        "react/no-did-mount-set-state": "error",
        "react/no-did-update-set-state": "error",
        "react/no-invalid-html-attribute": "error",
        // could be bothersome
        "react/no-multi-comp": "error",
        "react/no-namespace": "error",
        "react/no-object-type-as-default-prop": "error",
        "react/no-redundant-should-component-update": "error",
        "react/no-this-in-sfc": "error",
        "react/no-typos": "error",
        "react/no-unstable-nested-components": "error",
        "react/no-unused-class-component-methods": "error",
        "react/no-unused-prop-types": "error",
        "react/no-unused-state": "error",
        "react/no-will-update-set-state": "error",
        "react/prefer-es6-class": "error",
        "react/prefer-exact-props": "error",
        "react/prefer-stateless-function": "error",
        "react/require-optimization": "error",
        "react/self-closing-comp": "error",
        "react/sort-comp": "error",
        "react/state-in-constructor": "error",
        "react/static-property-placement": "error",
        "react/style-prop-object": "error",
        "react/void-dom-elements-no-children": "error",
        "react/display-name": "off",
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/no-invalid-void-type": "error",
        "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
        "@typescript-eslint/no-unsafe-declaration-merging": "error",
        "@typescript-eslint/consistent-type-assertions": [
            "error",
            {
                "assertionStyle": "never"
            }
        ]
        // "@typescript-eslint/no-floating-promises": [
        //     "error",
        //     {
        //         "ignoreVoid": true
        //     }
        // ]
    }
}